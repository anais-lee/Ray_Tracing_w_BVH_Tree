#include <scene/geometry/mesh.h>
#include <la.h>
#include <tinyobj/tiny_obj_loader.h>
#include <iostream>

Triangle::Triangle(const glm::vec3 &p1, const glm::vec3 &p2, const glm::vec3 &p3):
    Triangle(p1, p2, p3, glm::vec3(1), glm::vec3(1), glm::vec3(1), glm::vec2(0), glm::vec2(0), glm::vec2(0))
{
    for(int i = 0; i < 3; i++)
    {
        normals[i] = plane_normal;
    }
}


Triangle::Triangle(const glm::vec3 &p1, const glm::vec3 &p2, const glm::vec3 &p3, const glm::vec3 &n1, const glm::vec3 &n2, const glm::vec3 &n3):
    Triangle(p1, p2, p3, n1, n2, n3, glm::vec2(0), glm::vec2(0), glm::vec2(0))
{}






Triangle::Triangle(const glm::vec3 &p1, const glm::vec3 &p2, const glm::vec3 &p3, const glm::vec3 &n1, const glm::vec3 &n2, const glm::vec3 &n3, const glm::vec2 &t1, const glm::vec2 &t2, const glm::vec2 &t3)
{
    plane_normal = glm::normalize(glm::cross(p2 - p1, p3 - p2));
    points[0] = p1;
    points[1] = p2;
    points[2] = p3;
    normals[0] = n1;
    normals[1] = n2;
    normals[2] = n3;
    uvs[0] = t1;
    uvs[1] = t2;
    uvs[2] = t3;
}


float Area(const glm::vec3 &p1, const glm::vec3 &p2, const glm::vec3 &p3)
{
    return glm::length(glm::cross(p1 - p2, p3 - p2)) * 0.5f;
}

//Returns the interpolation of the triangle's three normals based on the point inside the triangle that is given.
glm::vec3 Triangle::GetNormal(const glm::vec3 &P)
{
    float A = Area(points[0], points[1], points[2]);
    float A0 = Area(points[1], points[2], P);
    float A1 = Area(points[0], points[2], P);
    float A2 = Area(points[0], points[1], P);
    return glm::normalize(normals[0] * A0/A + normals[1] * A1/A + normals[2] * A2/A);
}





glm::vec4 Triangle::GetNormal(const glm::vec4 &position)
{
    glm::vec3 result = GetNormal(glm::vec3(position));
    return glm::vec4(result, 0);
}







// this function takes as input a local-space vec3 point
// on the surface of the object and returns a vec2 representing
// the texture coordinates at that point.

glm::vec2 Triangle::GetUVCoordinates(const glm::vec3 &point) {

    glm::vec3 AB = this->points[1] - points[0];
    glm::vec3 AC = this->points[2] - points[0];
    float lengthABAC = glm::length(AB) * glm::length(AC);
    float theta = acos(DEG2RAD * glm::dot(AB, AC) / lengthABAC); // take arc cosine to find theta (in radians)
    float S = 0.5 * lengthABAC * sin(theta);

    // check each sub area
    // S1 (across from p2)
    glm::vec3 pp1 = this->points[1] - point;
    glm::vec3 pp0 = this->points[0] - point;
    float lengthpp1pp0 = glm::length(pp1) * glm::length(pp0);
    theta = acos(DEG2RAD * glm::dot(pp1,pp0) / lengthpp1pp0);
    float S1 = 0.5 * lengthpp1pp0 * sin(theta);

    // S2 (across from p0)
    glm::vec3 pp2 = this->points[2] - point;
    float lengthpp1pp2 = glm::length(pp1) * glm::length(pp2);
    theta = acos(DEG2RAD * glm::dot(pp1,pp2) / lengthpp1pp2);
    float S2 = 0.5 * lengthpp1pp2 * sin(theta);

    // S3 (across from p1)
    float lengthpp0pp2 = glm::length(pp0) * glm::length(pp2);
    theta = acos(DEG2RAD * glm::dot(pp0,pp2) / lengthpp0pp2);
    float S3 = 0.5 * lengthpp0pp2 * sin(theta);

    glm::vec2 P_UV = this->uvs[0]*S2/S + this->uvs[1]*S3/S + this->uvs[2]*S1/S;
    return P_UV;

}





//The ray in this function is not transformed because it was *already* transformed in Mesh::GetIntersection
Intersection Triangle::GetIntersection(Ray r)
{
    Ray r1 = r.GetTransformedCopy(this->transform.invT());
    Intersection pt;

    //find local intersection with plane (that triangle is on) and return
    float t = glm::dot(this->plane_normal, (this->points[0] - r1.origin)) /
                                    glm::dot(this->plane_normal, r1.direction);
    if (t > 0) { //dont do for negative t values
        //find pt of intersection:
        glm::vec3 P = r1.origin + t * r1.direction;

        // if there was an intersection with this plane:
        // use barycentric coords to determine if pt is within triangle plane
        //area of triangle:
        glm::vec3 AB = this->points[1] - points[0];
        glm::vec3 AC = this->points[2] - points[0];
        float lengthABAC = glm::length(AB) * glm::length(AC);
        float theta = acos(DEG2RAD * glm::dot(AB, AC) / lengthABAC); // take arc cosine to find theta (in radians)
        float S = 0.5 * lengthABAC * sin(theta);

        // check each sub area
        // S1
        glm::vec3 pp1 = this->points[1] - P;
        glm::vec3 pp0 = this->points[0] - P;
        float lengthpp1pp0 = glm::length(pp1) * glm::length(pp0);
        theta = acos(DEG2RAD * glm::dot(pp1,pp0) / lengthpp1pp0);
        float S1 = 0.5 * lengthpp1pp0 * sin(theta);

        // S2
        glm::vec3 pp2 = this->points[2] - P;
        float lengthpp1pp2 = glm::length(pp1) * glm::length(pp2);
        theta = acos(DEG2RAD * glm::dot(pp1,pp2) / lengthpp1pp2);
        float S2 = 0.5 * lengthpp1pp2 * sin(theta);

        // S3
        float lengthpp0pp2 = glm::length(pp0) * glm::length(pp2);
        theta = acos(DEG2RAD * glm::dot(pp0,pp2) / lengthpp0pp2);
        float S3 = 0.5 * lengthpp0pp2 * sin(theta);

        if (S1>=0 && S1<=1 && S2>=0 && S2<=1 && S3>=0 && S3<=1 && S1+S2+S3==1) {
            //then P is within the bounds of the triangle

            //find world space (with respect to triangle in mesh)
            pt.point = glm::vec3(this->transform.T() * glm::vec4(P[0],P[1],P[2],1));
            pt.t = glm::distance(P, r.origin);
            pt.object_hit = this;
            if (pt.object_hit->material->texture == NULL) {
                pt.hit_color = this->material->base_color;
            } else {
                pt.hit_color = this->material->base_color*this->material->GetImageColor(GetUVCoordinates(P), this->material->texture);
            }
            glm::vec3 tempP = GetNormal(P);
            pt.normal = glm::normalize(glm::vec3(this->transform.invTransT() * glm::vec4(tempP[0],tempP[1],tempP[2],1)));
        }
    }
    return pt; //returned in local space (with respect to the mesh)
}








Intersection Mesh::GetIntersection(Ray r)
{
    //CAN MESH & TRIANGLES IN MESH BOTH BE TRANSFORMED?? ***
    //if not, need to edit the function above

    Intersection closestIntersection;
    Ray r1 = r.GetTransformedCopy(this->transform.invT());

    //iterate through all the triangles of the mesh and check the intersections with each.
    for(int i = 0; i < faces.count(); ++i ) {
        Intersection temp = faces[i]->GetIntersection(r1);
        // replaces if the t for this face is NON negative,
        // OR is the first intersection encountered,
        // OR is less than the previously encountered t val
        if (temp.t >= 0 && (closestIntersection.t < 0 || temp.t < closestIntersection.t)) {
            closestIntersection = temp;
        }
    }
    //still in local coordinates (with respect to mesh)
    glm::vec3 localPt = r1.origin + closestIntersection.t * r1.direction;

    closestIntersection.normal = glm::vec3(this->transform.invTransT()*glm::vec4(((Triangle*)closestIntersection.object_hit)->GetNormal(localPt),0));
    closestIntersection.point = glm::vec3(this->transform.T() * glm::vec4(localPt,1));
    closestIntersection.t = glm::distance(closestIntersection.point, r.origin);

    return closestIntersection; //returns default if no intersection exists
}






void Mesh::SetMaterial(Material *m)
{
    this->material = m;
    for(Triangle *t : faces)
    {
        t->SetMaterial(m);
    }
}







void Mesh::LoadOBJ(const QStringRef &filename, const QStringRef &local_path)
{
    QString filepath = local_path.toString(); filepath.append(filename);
    std::vector<tinyobj::shape_t> shapes; std::vector<tinyobj::material_t> materials;
    std::string errors = tinyobj::LoadObj(shapes, materials, filepath.toStdString().c_str());
    std::cout << errors << std::endl;
    if(errors.size() == 0)
    {
        //Read the information from the vector of shape_ts
        for(unsigned int i = 0; i < shapes.size(); i++)
        {
            std::vector<float> &positions = shapes[i].mesh.positions;
            std::vector<float> &normals = shapes[i].mesh.normals;
            std::vector<float> &uvs = shapes[i].mesh.texcoords;
            std::vector<unsigned int> &indices = shapes[i].mesh.indices;
            for(unsigned int j = 0; j < indices.size(); j += 3)
            {
                glm::vec3 p1(positions[indices[j]*3], positions[indices[j]*3+1], positions[indices[j]*3+2]);
                glm::vec3 p2(positions[indices[j+1]*3], positions[indices[j+1]*3+1], positions[indices[j+1]*3+2]);
                glm::vec3 p3(positions[indices[j+2]*3], positions[indices[j+2]*3+1], positions[indices[j+2]*3+2]);

                Triangle* t = new Triangle(p1, p2, p3);
                if(normals.size() > 0)
                {
                    glm::vec3 n1(normals[indices[j]*3], normals[indices[j]*3+1], normals[indices[j]*3+2]);
                    glm::vec3 n2(normals[indices[j+1]*3], normals[indices[j+1]*3+1], normals[indices[j+1]*3+2]);
                    glm::vec3 n3(normals[indices[j+2]*3], normals[indices[j+2]*3+1], normals[indices[j+2]*3+2]);
                    t->normals[0] = n1;
                    t->normals[1] = n2;
                    t->normals[2] = n3;
                }
                if(uvs.size() > 0)
                {
                    glm::vec2 t1(uvs[indices[j]*2], uvs[indices[j]*2+1]);
                    glm::vec2 t2(uvs[indices[j+1]*2], uvs[indices[j+1]*2+1]);
                    glm::vec2 t3(uvs[indices[j+2]*2], uvs[indices[j+2]*2+1]);
                    t->uvs[0] = t1;
                    t->uvs[1] = t2;
                    t->uvs[2] = t3;
                }
                this->faces.append(t);
            }
        }
        std::cout << "" << std::endl;
    }
    else
    {
        //An error loading the OBJ occurred!
        std::cout << errors << std::endl;
    }
}







void Mesh::create(){
    //Count the number of vertices for each face so we can get a count for the entire mesh
        std::vector<glm::vec3> vert_pos;
        std::vector<glm::vec3> vert_nor;
        std::vector<glm::vec3> vert_col;
        std::vector<GLuint> vert_idx;

        unsigned int index = 0;

        for(int i = 0; i < faces.size(); i++){
            Triangle* tri = faces[i];
            vert_pos.push_back(tri->points[0]); vert_nor.push_back(tri->normals[0]); vert_col.push_back(tri->material->base_color);
            vert_pos.push_back(tri->points[1]); vert_nor.push_back(tri->normals[1]); vert_col.push_back(tri->material->base_color);
            vert_pos.push_back(tri->points[2]); vert_nor.push_back(tri->normals[2]); vert_col.push_back(tri->material->base_color);
            vert_idx.push_back(index++);vert_idx.push_back(index++);vert_idx.push_back(index++);
        }

        count = vert_idx.size();
        int vert_count = vert_pos.size();

        bufIdx.create();
        bufIdx.bind();
        bufIdx.setUsagePattern(QOpenGLBuffer::StaticDraw);
        bufIdx.allocate(vert_idx.data(), count * sizeof(GLuint));

        bufPos.create();
        bufPos.bind();
        bufPos.setUsagePattern(QOpenGLBuffer::StaticDraw);
        bufPos.allocate(vert_pos.data(), vert_count * sizeof(glm::vec3));

        bufCol.create();
        bufCol.bind();
        bufCol.setUsagePattern(QOpenGLBuffer::StaticDraw);
        bufCol.allocate(vert_col.data(), vert_count * sizeof(glm::vec3));

        bufNor.create();
        bufNor.bind();
        bufNor.setUsagePattern(QOpenGLBuffer::StaticDraw);
        bufNor.allocate(vert_nor.data(), vert_count * sizeof(glm::vec3));

        this->boundingBox = new BoundingBox();
        this->setBoundingBox(); //calls set bounding box for mesh
}






//This does nothing because individual triangles are not rendered with OpenGL; they are rendered all together in their Mesh.
void Triangle::create(){
}


glm::vec2 Mesh::GetUVCoordinates(const glm::vec3 &point){
}




void Triangle::setBoundingBox() {
    //find min/max bounds of this triangle
    glm::vec3 tempPt;

    float Xminmax[2];
    float Yminmax[2];
    float Zminmax[2];
    Xminmax[0] = (meshT*glm::vec4(this->points[0],1))[0]; //set default value as first point
    Xminmax[1] = (meshT*glm::vec4(this->points[0],1))[0];
    Yminmax[0] = (meshT*glm::vec4(this->points[0],1))[1];
    Yminmax[1] = (meshT*glm::vec4(this->points[0],1))[1];
    Zminmax[0] = (meshT*glm::vec4(this->points[0],1))[2];
    Zminmax[1] = (meshT*glm::vec4(this->points[0],1))[2];

    for (int i = 0; i < 3; i++) {
        //move all points of triangle according to mesh's tranformation matrix
        tempPt = meshT*this->points[i];
    }
    this->boundingBox = new BoundingBox();
    this->boundingBox->setTransformedBox(this->transform.T());
    this->boundingBox->create();
}



void Mesh::setBoundingBox() {

    //set bounding boxes for all the triangle faces within this mesh
    for (int i = 0; i < this->faces.count(); i++) {
        this->faces[i]->transform = this->transform;
        this->faces[i]->setBoundingBox();
    }

    createMeshBVHTree();
    this->boundingBox->setTransformedBox(this->transform.T());
    this->boundingBox->create();
}
